{"version":3,"sources":["Canvas.js","App.js","reportWebVitals.js","index.js"],"names":["Canvas","props","ref","createRef","width","height","cx","layout","cy","canvas","this","current","i","index","cards","card","drawImage","img","image","ctx","getContext","ox","oy","Math","floor","React","Component","App","layouts","tts","pnp_common","state","loading","imposable","cardsCount","waiting","pdfjs","GlobalWorkerOptions","workerSrc","version","e","file_input","target","files","length","file","reader","FileReader","type","onload","loadedImage","bind","name","readAsDataURL","loadedPDF","readAsArrayBuffer","alert","value","image_uuid","addWaiting","Image","title","removeWaiting","addCard","src","result","uuid","UUID","count","push","setState","typedarray","Uint8Array","getDocument","promise","then","pdf","p","numPages","page_uuid","getPage","page","viewport","getViewport","scale","document","createElement","body","appendChild","setAttribute","context","render","canvasContext","toDataURL","removeChild","pageNumber","message","console","log","persist","input","updateCard","prop","className","id","multiple","onChange","load","accept","updateLayout","renderCards","renderPages","href","items","map","updateCount","min","step","c","random","dt","Date","getTime","replace","r","toString","idx","indexOf","splice","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.23308b40.chunk.js","sourcesContent":["import React, { createRef } from \"react\";\r\n\r\nclass Canvas extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.ref = createRef(); \r\n        this.width = 0;\r\n        this.height = 0;\r\n        this.cx = this.props.layout.cx;\r\n        this.cy = this.props.layout.cy;\r\n    }\r\n    componentDidMount() {\r\n        let canvas = this.ref.current;\r\n        let i = 0;\r\n        for (let index in this.props.cards) {\r\n            let card = this.props.cards[index]; \r\n            this.drawImage(canvas, card.img, i++);\r\n        }\r\n    }\r\n    drawImage(canvas, image, i) {\r\n        var ctx = canvas.getContext(\"2d\");\r\n        if (!this.width || !this.height) {\r\n            canvas.width = this.width = image.width * this.cx;\r\n            canvas.height = this.height = image.height * this.cy;\r\n        }\r\n        var ox = i % this.cx;\r\n        var oy = Math.floor(i / this.cx);\r\n        ctx.drawImage(image, ox * image.width, oy * image.height, image.width, image.height);\r\n    }\r\n    render() {\r\n        return  <canvas ref={this.ref} width={this.width} height={this.height} />;\r\n    }\r\n}\r\nexport default Canvas;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Canvas from \"./Canvas\";\n\nimport { pdfjs } from \"react-pdf\";\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.layouts = {\n            tts: { cx: 10, cy: 7 },\n            pnp_common: { cx: 3, cy: 3 },\n        };\n        this.state = {\n            loading: false,\n            imposable: false,\n            cards: [],\n            cardsCount: 0,\n            layout: \"tts\",\n        };\n        this.waiting = [];\n    }\n    componentDidMount() {\n        pdfjs.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n    }\n    load(e) {\n        let file_input = e.target;\n        var i = file_input.files.length;\n\n        while (i > 0) {\n            let file = file_input.files[i - 1];\n            let reader = new FileReader();\n            switch (file.type) {\n                case \"image/jpeg\":\n                case \"image/png\":\n                    reader.onload = this.loadedImage.bind(this, file.name, i);\n                    reader.readAsDataURL(file);\n                    break;\n                case \"application/pdf\":\n                    reader.onload = this.loadedPDF.bind(this, file.name, i);\n                    reader.readAsArrayBuffer(file);\n                    break;\n                default:\n                    alert(\"no loader for \" + file.type);\n            }\n            i--;\n        }\n        file_input.value = \"\";\n    }\n\n    loadedImage(name, i, e) {\n        let image_uuid = this.addWaiting();\n        var image = new Image();\n        image.title = name;\n        image.onload = function (image_uuid, e) {\n            this.removeWaiting(image_uuid);\n            this.addCard(e.target, e.target.title);\n        }.bind(this, image_uuid);\n        image.src = e.target.result;\n    }\n\n    addCard(img, name) {\n        let cards = this.state.cards;\n        let card = {\n            uuid: this.UUID(),\n            img: img,\n            name: name,\n            count: 1,\n        };\n        cards.push(card);\n        this.setState({ cards: cards });\n        return card;\n    }\n\n    loadedPDF(name, i, e) {\n        let typedarray = new Uint8Array(e.target.result);\n        pdfjs.getDocument(typedarray).promise.then(\n            function (pdf) {\n                var p = pdf.numPages;\n                do {\n                    let page_uuid = this.addWaiting();\n                    pdf.getPage(p).then(\n                        function (page_uuid, page) {\n                            \n                            let viewport = page.getViewport({ scale: 4.166666 });\n                            let canvas = document.createElement(\"canvas\");\n                            document.body.appendChild(canvas);\n                            canvas.setAttribute(\"style\", \"display: none;\");\n                            let context = canvas.getContext(\"2d\");\n                            canvas.width = viewport.width;\n                            canvas.height = viewport.height;\n                            page.render({ canvasContext: context, viewport: viewport }).promise.then(\n                                function (canvas) {\n                                    this.removeWaiting(page_uuid);\n                                    let img = document.createElement(\"img\");\n                                    img.setAttribute(\"src\", canvas.toDataURL(\"image/jpeg\"));\n                                    img.setAttribute(\"width\", canvas.width);\n                                    img.setAttribute(\"height\", canvas.height);\n                                    document.body.removeChild(canvas);\n                                    this.addCard(img, name + \" page \" + page.pageNumber);\n                                }.bind(this, canvas, page_uuid),\n                                function (page_uuid, message) {\n                                    this.removeWaiting(page_uuid);\n                                    console.log(\"page.render.reject\", message);\n                                }.bind(page_uuid)\n                            );\n                        }.bind(this, page_uuid)\n                    );\n                } while (p-- > 1);\n            }.bind(this)\n        );\n    }\n\n    updateLayout(e) {\n        e.persist();\n        this.setState({ layout: e.target.value });\n    }\n\n    updateCount(e) {\n        e.persist();\n        let input = e.target;\n        this.updateCard(input.name, \"count\", input.value);\n    }\n\n    updateCard(uuid, prop, value) {\n        let cards = this.state.cards;\n        for (let index in cards) {\n            if (cards[index].uuid == uuid) {\n                cards[index][prop] = value;\n            }\n        }\n        this.setState({ cards: cards, cardsCount: cards.length });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                        <div className=\"col-3\" id=\"sidebar\">\n                            <h1>Deck-Imposer</h1>\n                            <div className=\"step mb-5\">\n                                <p>\n                                    <b>Step 1.</b> Select Images or PDF\n                                </p>\n                                <div className=\"form-group\">\n                                    <input type=\"file\" name=\"img[]\" id=\"upload\" multiple onChange={this.load.bind(this)} accept=\"image/*,application/pdf\" />\n                                </div>\n                                {this.state.loading == true && <p>Loading...</p>}\n                            </div>\n                            <div className=\"step mb-5\">\n                                <p>\n                                    <b>Step 2.</b> Select Layout\n                                </p>\n\n                                <div className=\"form-group\">\n                                    <select className=\"form-control\" onChange={this.updateLayout.bind(this)}>\n                                        <option value=\"tts\">Tabletop Simulator Deck (10x7)</option>\n                                        <option value=\"pnp_common\">Common PnP (3x3)</option>\n                                    </select>\n                                </div>\n                            </div>\n                            <div className=\"step mb-5\">\n                                <p>\n                                    <b>Step 3.</b> Set quantity of each card.\n                                </p>\n                                <div id=\"cards\">{this.renderCards()}</div>\n                            </div>\n                            <div className=\"step mb-5\">\n                                <p>\n                                    <b>Step 4.</b> Right click and save imposed image(s).\n                                </p>\n                            </div>\n                        </div>\n                        <div className=\"col-9\" id=\"main\">\n                            <div id=\"top\"></div>\n                            <div id=\"canvas_container\">{this.renderPages()}</div>\n                        </div>\n                    </div>\n                </div>\n                <footer className=\"container my-5\">\n                    <div className=\"row\">\n                        <div className=\"col-md-4\">\n                            For info or help, visit <a href=\"https://github.com/BrianWendt/deck-imposer\">GitHub</a>\n                        </div>\n                        <div className=\"col-md-4 text-center\">GNU General Public License v3.0</div>\n                        <div className=\"col-md-4 text-right\">Pay it forward.</div>\n                    </div>\n                </footer>\n            </div>\n        );\n    }\n\n    renderCards() {\n        const items = this.state.cards.map((card) => (\n            <div key={card.uuid} className=\"form-group\">\n                <div className=\"row\">\n                    <div className=\"col-sm-9\">\n                        <label>{card.name}</label>\n                    </div>\n                    <div className=\"col-sm-3\">\n                        <input name={card.uuid} value={card.count} onChange={this.updateCount.bind(this)} type=\"number\" min=\"0\" step=\"1\" className=\"form-control\" />\n                    </div>\n                </div>\n            </div>\n        ));\n        return <div>{items}</div>;\n    }\n\n    renderPages() {\n        const items = [];\n        if (this.state.loading) {\n            return <div />;\n        }\n        let layout = this.layouts[this.state.layout];\n        let cards = [];\n        let i = 0;\n        for (let index in this.state.cards) {\n            let card = this.state.cards[index];\n            let c = card.count;\n            while (c > 0) {\n                cards.push(card);\n                c--;\n                i++;\n                if (i == layout.cx * layout.cy) {\n                    i = 0;\n                    items.push(<Canvas cards={cards} layout={layout} key={Math.random()} />);\n                    cards = [];\n                }\n            }\n        }\n        items.push(<Canvas cards={cards} layout={layout} key={Math.random()} />);\n\n        return <div>{items}</div>;\n    }\n\n    UUID() {\n        var dt = new Date().getTime();\n        var uuid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n            var r = (dt + Math.random() * 16) % 16 | 0;\n            dt = Math.floor(dt / 16);\n            return (c == \"x\" ? r : (r & 0x3) | 0x8).toString(16);\n        });\n        return uuid;\n    }\n\n    addWaiting(){\n        this.setState({loading: true});\n        let uuid = this.UUID();\n        this.waiting.push(uuid);\n        return uuid;\n    }\n\n    removeWaiting(uuid){\n        let idx = this.waiting.indexOf(uuid);\n        if(idx > -1){\n            this.waiting.splice(idx, 1);\n        }\n        if(this.waiting.length < 1){\n            this.setState({loading: false});\n        }\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}