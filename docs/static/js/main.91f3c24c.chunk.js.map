{"version":3,"sources":["Canvas.js","ImageLoader.js","PDFLoader.js","App.js","reportWebVitals.js","index.js"],"names":["Canvas","props","ref","createRef","width","height","cx","layout","cy","canvas","this","current","i","index","cards","card","drawImage","img","image","ctx","getContext","m","margin","ox","oy","Math","floor","x","y","className","length","React","Component","ImageLoader","context","file","uuid","e","addWaiting","Image","title","name","onload","imageOnLoad","bind","src","target","result","addCard","removeWaiting","loadImage","loader","onLoad","PDFLoader","pdfjs","GlobalWorkerOptions","workerSrc","version","getDocument","Uint8Array","promise","then","getDocumentFailed","pdf","p","numPages","page_uuid","getPage","getPageFailed","page","viewport","getViewport","scale","document","createElement","body","appendChild","setAttribute","render","canvasContext","rendered","renderedFailed","toDataURL","removeChild","pageNumber","message","console","log","loadPDF","App","layouts","tts","pnp_poker","state","loading","imposable","cardsCount","waiting","file_input","files","reader","FileReader","type","readAsDataURL","readAsArrayBuffer","alert","value","count","push","setState","persist","prop","updateCard","id","multiple","onChange","load","accept","style","display","updateLayout","renderCards","renderSheets","href","items","map","updateCardCount","min","step","c","random","dt","Date","getTime","replace","r","toString","UUID","idx","indexOf","splice","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.91f3c24c.chunk.js","sourcesContent":["import React, { createRef } from \"react\";\r\n\r\nclass Canvas extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.ref = createRef(); \r\n        this.width = 0;\r\n        this.height = 0;\r\n        this.cx = this.props.layout.cx;\r\n        this.cy = this.props.layout.cy;\r\n    }\r\n    componentDidMount() {\r\n        let canvas = this.ref.current;\r\n        let i = 0;\r\n        for (let index in this.props.cards) {\r\n            let card = this.props.cards[index]; \r\n            this.drawImage(canvas, card.img, i++);\r\n        }\r\n    }\r\n    drawImage(canvas, image, i) {\r\n        var ctx = canvas.getContext(\"2d\");\r\n        var m = (this.props.layout.margin || 0) * 300;\r\n        if (!this.width || !this.height) {\r\n            canvas.width = this.width = (image.width * this.cx) + (m * (this.cx - 1));\r\n            canvas.height = this.height = (image.height * this.cy) + (m * (this.cy - 1));\r\n        }\r\n        var ox = i % this.cx;\r\n        var oy = Math.floor(i / this.cx);\r\n        var x = (ox * image.width) + (m * ox);\r\n        var y = (oy * image.height) + (m * oy);\r\n        ctx.drawImage(image, x, y, image.width, image.height);\r\n    }\r\n    render() {\r\n        return  (<div className=\"col-lg-4 col-md-6 mb-3 text-center\">\r\n            <canvas ref={this.ref} width={this.width} height={this.height} />\r\n            {this.props.cards.length} cards\r\n        </div>);\r\n    }\r\n}\r\nexport default Canvas;\r\n","class ImageLoader {\r\n    constructor(context, file) {\r\n        this.context = context;\r\n        this.file = file;\r\n        this.uuid = null;\r\n    }\r\n\r\n    onLoad(e){\r\n        this.uuid = this.context.addWaiting();\r\n        var image = new Image();\r\n        image.title = this.file.name;\r\n        image.onload = this.imageOnLoad.bind(this);\r\n        image.src = e.target.result;\r\n    }\r\n\r\n    imageOnLoad(e){\r\n        this.context.addCard(e.target, e.target.title, this.uuid);\r\n        this.context.removeWaiting(this.uuid);\r\n    }\r\n}\r\n\r\nexport default function loadImage(context, file){\r\n    let loader = new ImageLoader(context, file);\r\n    return loader.onLoad.bind(loader);\r\n};","import { pdfjs } from \"react-pdf\";\r\n\r\nclass PDFLoader {\r\n    constructor(context, file) {\r\n        this.context = context;\r\n        this.file = file;\r\n        pdfjs.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\r\n    }\r\n\r\n    onLoad(e) {\r\n        pdfjs.getDocument(new Uint8Array(e.target.result)).promise.then(this.getDocument.bind(this), this.getDocumentFailed.bind(this));\r\n    }\r\n\r\n    getDocument(pdf) {\r\n        var p = pdf.numPages;\r\n        do {\r\n            let page_uuid = this.context.addWaiting();\r\n            pdf.getPage(p).then(this.getPage.bind(this, page_uuid), this.getPageFailed.bind(this, page_uuid));\r\n        } while (p-- > 1);\r\n    }\r\n\r\n    getPage(page_uuid, page) {\r\n        let viewport = page.getViewport({ scale: 300/72 }); //DPI in pdfjs is 72, this scales to 300dpi\r\n        let canvas = document.createElement(\"canvas\");\r\n        document.body.appendChild(canvas);\r\n        canvas.setAttribute(\"style\", \"display: none;\");\r\n        let context = canvas.getContext(\"2d\");\r\n        canvas.width = viewport.width;\r\n        canvas.height = viewport.height;\r\n        page.render({ canvasContext: context, viewport: viewport }).promise.then(this.rendered.bind(this, canvas, page_uuid, page), this.renderedFailed.bind(page_uuid));\r\n    }\r\n\r\n    rendered(canvas, page_uuid, page) {\r\n        let img = document.createElement(\"img\");\r\n        img.setAttribute(\"src\", canvas.toDataURL(\"image/jpeg\"));\r\n        img.setAttribute(\"width\", canvas.width);\r\n        img.setAttribute(\"height\", canvas.height);\r\n        document.body.removeChild(canvas);\r\n        this.context.addCard(img, this.file.name + \" page \" + page.pageNumber, page_uuid);\r\n        this.context.removeWaiting(page_uuid);\r\n    }\r\n\r\n    getDocumentFailed(message){\r\n        console.log(\"pdfjs.getDocument failed\", message);\r\n    }\r\n\r\n    getPageFailed(page_uuid, message) {\r\n        this.context.removeWaiting(page_uuid);\r\n        console.log(\"pdfjs.document.getPage failed\", message);\r\n    }\r\n\r\n    renderedFailed(page_uuid, message) {\r\n        this.context.removeWaiting(page_uuid);\r\n        console.log(\"pdfjs.document.page.render failed\", message);\r\n    }\r\n}\r\n\r\nexport default function loadPDF(context, file) {\r\n    let loader = new PDFLoader(context, file);\r\n    return loader.onLoad.bind(loader);\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Canvas from \"./Canvas\";\n\nimport loadImage from \"./ImageLoader\";\nimport loadPDF from \"./PDFLoader\";\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.layouts = {\n            tts: { cx: 10, cy: 7 },\n            pnp_poker: { cx: 3, cy: 3 },\n        };\n        this.state = {\n            loading: false,\n            imposable: false,\n            cards: [],\n            cardsCount: 0,\n            layout: \"pnp_poker\",\n        };\n        this.waiting = [];\n    }\n\n    load(e) {\n        let file_input = e.target;\n        var i = file_input.files.length;\n\n        while (i > 0) {\n            let file = file_input.files[i - 1];\n            let reader = new FileReader();\n            switch (file.type) {\n                case \"image/jpeg\":\n                case \"image/png\":\n                    reader.onload = loadImage(this, file);\n                    reader.readAsDataURL(file);\n                    break;\n                case \"application/pdf\":\n                    reader.onload = loadPDF(this, file);\n                    reader.readAsArrayBuffer(file);\n                    break;\n                default:\n                    alert(\"no loader for \" + file.type);\n            }\n            i--;\n        }\n        file_input.value = \"\";\n    }\n\n    addCard(img, name, uuid) {\n        let cards = this.state.cards;\n        let card = {\n            uuid: uuid,\n            img: img,\n            name: name,\n            count: 1,\n        };\n        cards.push(card);\n        this.setState({ cards: cards });\n        return card;\n    }\n\n    updateLayout(e) {\n        e.persist();\n        this.setState({ layout: e.target.value });\n    }\n\n    updateCard(uuid, prop, value) {\n        let cards = this.state.cards;\n        for (let index in cards) {\n            if (cards[index].uuid === uuid) {\n                cards[index][prop] = value;\n            }\n        }\n        this.setState({ cards: cards, cardsCount: cards.length });\n    }\n\n    updateCardCount(e) {\n        e.persist();\n        this.updateCard(e.target.name, \"count\", e.target.value);\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                        <div className=\"col-3\" id=\"sidebar\">\n                            <h1>Deck-Imposer</h1>\n                            <div className=\"step mb-5\">\n                                <p>\n                                    <b>Step 1.</b> Select Images or PDF\n                                </p>\n                                <div className=\"form-group\">\n                                    <label className=\"btn btn-primary\">\n                                        Choose File(s)\n                                        <input type=\"file\" name=\"img[]\" id=\"upload\" multiple onChange={this.load.bind(this)} accept=\"image/*,application/pdf\" style={{display:'none'}}/>\n                                    </label>\n                                </div>\n                                {this.state.loading === true && <p className=\"alert alert-success text-center\">Processing...</p>}\n                            </div>\n                            <div className=\"step mb-5\">\n                                <p>\n                                    <b>Step 2.</b> Select Layout\n                                </p>\n\n                                <div className=\"form-group\">\n                                    <select className=\"form-control\" onChange={this.updateLayout.bind(this)}>\n                                        <option value=\"pnp_poker\">PnP - Poker Size - \"Letter\" (3x3)</option>\n                                        <option value=\"tts\">Tabletop Simulator Deck (10x7)</option>\n                                    </select>\n                                </div>\n                            </div>\n                            <div className=\"step mb-5\">\n                                <p>\n                                    <b>Step 3.</b> Set quantity of each card.\n                                </p>\n                                <div id=\"cards\">{this.renderCards()}</div>\n                            </div>\n                            <div className=\"step mb-5\">\n                                <p>\n                                    <b>Step 4.</b> Right click and save imposed image(s).\n                                </p>\n                            </div>\n                        </div>\n                        <div className=\"col-9\" id=\"main\">\n                            <div id=\"top\"></div>\n                            <div id=\"canvas_container\">{this.renderSheets()}</div>\n                        </div>\n                    </div>\n                </div>\n                <footer className=\"container my-5\">\n                    <div className=\"row\">\n                        <div className=\"col-md-4\">\n                            For info or help, visit the <a href=\"https://github.com/BrianWendt/deck-imposer\">GitHub</a>\n                        </div>\n                        <div className=\"col-md-4 text-center\">GNU General Public License v3.0</div>\n                        <div className=\"col-md-4 text-right\">Pay it forward.</div>\n                    </div>\n                </footer>\n            </div>\n        );\n    }\n\n    renderCards() {\n        const items = this.state.cards.map((card) => (\n            <div key={card.uuid} className=\"form-group\">\n                <div className=\"row\">\n                    <div className=\"col-sm-9\">\n                        <label>{card.name}</label>\n                    </div>\n                    <div className=\"col-sm-3\">\n                        <input name={card.uuid} value={card.count} onChange={this.updateCardCount.bind(this)} type=\"number\" min=\"0\" step=\"1\" className=\"form-control\" />\n                    </div>\n                </div>\n            </div>\n        ));\n        return <div>{items}</div>;\n    }\n\n    renderSheets() {\n        const items = [];\n        if (this.state.loading) {\n            return <div />;\n        }\n        let layout = this.layouts[this.state.layout];\n        let cards = [];\n        let i = 0;\n        for (let index in this.state.cards) {\n            let card = this.state.cards[index];\n            let c = card.count;\n            while (c > 0) {\n                cards.push(card);\n                c--;\n                i++;\n                if (i === layout.cx * layout.cy) {\n                    i = 0;\n                    items.push(<Canvas cards={cards} layout={layout} key={Math.random()} />);\n                    cards = [];\n                }\n            }\n        }\n        items.push(<Canvas cards={cards} layout={layout} key={Math.random()} />);\n\n        return <div className=\"row\">{items}</div>;\n    }\n\n    UUID() {\n        var dt = new Date().getTime();\n        var uuid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n            var r = (dt + Math.random() * 16) % 16 | 0;\n            dt = Math.floor(dt / 16);\n            return (c === \"x\" ? r : (r & 0x3) | 0x8).toString(16);\n        });\n        return uuid;\n    }\n\n    addWaiting() {\n        this.setState({ loading: true });\n        let uuid = this.UUID();\n        this.waiting.push(uuid);\n        return uuid;\n    }\n\n    removeWaiting(uuid) {\n        let idx = this.waiting.indexOf(uuid);\n        if (idx > -1) {\n            this.waiting.splice(idx, 1);\n        }\n        if (this.waiting.length < 1) {\n            this.setState({ loading: false });\n        }\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}